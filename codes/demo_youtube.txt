https://labs.cognitiveclass.ai/tools/jupyterlab/

for CMD

pip install --upgrade tensorflow

import tensorflow as tf

mnist = tf.keras.datasets.mnist  #28x28
(x_train, y_train),(x_test, y_test) = mnist.load_data()  #unpacking

#to visualize:



print(x_train[0]) #actual data


import matplotlib.pyplot as plt
plt.imshow(x_train[0])
plt.show()


#normalize the data (katw apo to unpack)

x_train = tf.keras.utils.normalize(x_train, axis=1)
x_test = tf.keras.utils.normalize(x_test, axis=1)

#one more visual

print(x_train[0])

plt.imshow(x_train[0],cmap=plt.cm.binary)

#built the model  /arch

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))

#pars for training ,optim,adam like gradient

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=3)

...


# see how well general

val_loss, val_acc = model.evaluate(x_test, y_test)
print(val_loss)
print(val_acc)

#save n load

model.save('epic_num_reader.model')
new_model = tf.keras.models.load_model('epic_num_reader.model')

#predict

predictions = new_model.predict([x_test])
print(predictions)

import numpy as np

print(np.argmax(predictions[0]))

plt.imshow(x_test[0],cmap=plt.cm.binary)
plt.show()



plt.show(


